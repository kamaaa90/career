version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/static
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - DATABASE_URL=postgres://postgres:postgres@db:5432/career_services
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_SECRET=${PAYPAL_SECRET}
      - PAYPAL_MODE=${PAYPAL_MODE:-sandbox}
      - FRONTEND_URL=http://localhost:3000
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=career_services
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    command: celery -A core worker -l info
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    environment:
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - DATABASE_URL=postgres://postgres:postgres@db:5432/career_services
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_SECRET=${PAYPAL_SECRET}
      - PAYPAL_MODE=${PAYPAL_MODE:-sandbox}
    networks:
      - app-network
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    command: celery -A core beat -l info
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
      - celery
    environment:
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - DATABASE_URL=postgres://postgres:postgres@db:5432/career_services
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    networks:
      - app-network
    restart: unless-stopped

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    command: celery -A core flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - celery
    environment:
      - DEBUG=1
      - REDIS_URL=redis://redis:6379/0
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - backend_static:/usr/share/nginx/static
      - backend_media:/usr/share/nginx/media
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_media:
  backend_static:
